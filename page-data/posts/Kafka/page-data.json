{"componentChunkName":"component---src-templates-post-list-template-tsx","path":"/posts/Kafka","result":{"pageContext":{"fieldValue":"Kafka","edges":[{"node":{"frontmatter":{"path":"kafka_spring_video","title":"Reactive를 품은 Spring Kafka","category":"Kafka","date":"Jan 24, 2021"},"html":"<p>이 글은 이병찬 님의 강의를 요약한 내용입니다. 원본 강의는 <a href=\"https://youtu.be/HzQfJNusnO8\">링크</a>에서 확인하실 수 있습니다.</p>\n<h3>Kafka</h3>\n<p>아주 인기있는 스트리밍 플랫폼<br>\nSpring에서 Kafka를 사용하려면 Spring Kafka를 사용하면 된다.<br>\n<code>@KafkaListner</code> 어노테이션을 붙이는 것만으로도 웹 MVC에서 리퀘스트 매핍을 한 것과 같은 역할을 할 수 있다.<br>\n컨트롤러와 이 listner가 하는 일이 동일하다고 보면 된다.   </p>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@</span><span class=\"mtk10\">KafkaListener</span><span class=\"mtk1\">(topics=</span><span class=\"mtk8\">&quot;myTopic&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">listen</span><span class=\"mtk1\">(</span><span class=\"mtk10\">ConsumerRecord</span><span class=\"mtk1\">&lt;</span><span class=\"mtk15\">?</span><span class=\"mtk1\">, </span><span class=\"mtk15\">?</span><span class=\"mtk1\">&gt; record) throws Exception {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">logger</span><span class=\"mtk1\">.</span><span class=\"mtk11\">info</span><span class=\"mtk1\">(</span><span class=\"mtk12\">record</span><span class=\"mtk1\">.</span><span class=\"mtk11\">toString</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Do Something...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<ul>\n<li>\"myTopic\" 토픽의 이름을 통해 들어온 데이터를 <code>ConsumerRecord</code> 형태로 만들어서 전달이 된다.</li>\n<li>\n<p>하지만 한 가지 약점이 존재</p>\n<ul>\n<li>스레드를 점령한다</li>\n<li>한 시점에 하나 스레드에서 하나의 레코드만 처리할 수 있다.</li>\n<li>메소드 처리 시간이 오래 걸리면 큐에 쌓여 있는 데이터를 소모하는 시간보다 처리하는 시간이 더 길어져서 병목현상 발생할 수 있다.</li>\n<li>이 문제를 해결하기 위해 파티션을 쪼개서 병렬적으로 수행하게 한다.</li>\n<li>하지만 동시성을 준 것이 아니고 병렬성을 준 것이기 때문에 문제는 여전히 존재하게 된다.</li>\n</ul>\n</li>\n</ul>\n<h3>Streaming Platform의 본질?</h3>\n<p>구조</p>\n<blockquote>\n<p>producer ---publish---> stream &#x3C;---subscribe--- consumer</p>\n</blockquote>\n<ul>\n<li>Reactive의 구조와 굉장히 유사</li>\n</ul>\n<h3>ReactiveX의 Observable, Reactor의 Flux 본질??</h3>\n<ul>\n<li>어떤 대상을 <strong>Asynce</strong>하게 다루는 것</li>\n<li><strong>Async</strong>하게 다룬 것을 <strong>Stream</strong>으로 처리하겠다.</li>\n<li>그렇기 때문에 kafka에서 사용하는 것을 flux로 완전히 대체할 수 있다고 해석할 수 있다.</li>\n<li>\n<p>consumer</p>\n<blockquote>\n<p>특정 토픽에 대해서 kafka에 구독을 하고, 이것을 flux로 받아서 한 건 한 건씩 비동기로 처리를 하겠어!</p>\n</blockquote>\n</li>\n<li>\n<p>producer</p>\n<blockquote>\n<p>그저 flux create를 하는 것 뿐이야! 데이터만 밀어 넣어주면 돼!</p>\n</blockquote>\n</li>\n</ul>\n<h2>Reactor Kafka</h2>\n<ul>\n<li>Maven이나 Gradle에서 dependecy만 추가해주면 사용가능하다</li>\n<li>Spring Kafka 2.3.0부터 Reactor Kafka를 본격적으로 지원하기 시작했다.</li>\n</ul>\n<hr>\n<h1>기본 기능 구현하기</h1>\n<ol>\n<li>DB에 데이터가 업데이트되면 Detector는 그 정보를 메시지로 만들고 스트림으로 발행한다.   </li>\n<li>Update 처리기를 메시지를 읽고 업데이트 정보를 프로세싱한다.</li>\n</ol>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">process</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">consume</span><span class=\"mtk1\">().</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">recordToEventObject)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">saveEvent)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">getReceivers)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">dataProcessing)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">saveResult)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">subscribe</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3>메시지 중복 제거하기</h3>\n<ul>\n<li>5개의 detector가 존재한다.</li>\n<li>동일한 이벤트가 중복 감지되는 건 무시해야 한다.</li>\n<li><code>sampleFirst()</code>와 <code>groupBy()</code>를 이용한다.</li>\n</ul>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">process</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">consume</span><span class=\"mtk1\">().</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">recordToEventObject)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">groupBy</span><span class=\"mtk1\">(Message</span><span class=\"mtk15\">::</span><span class=\"mtk1\">key)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(flux </span><span class=\"mtk4\">-&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flux</span><span class=\"mtk1\">.</span><span class=\"mtk11\">sampleFirst</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Duration</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ofSeconds</span><span class=\"mtk1\">(</span><span class=\"mtk7\">30</span><span class=\"mtk1\">)))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">saveEvent)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">getReceivers)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">notify)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">saveResult)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">subscribe</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3>데이터 모아서 처리하기</h3>\n<ul>\n<li>한 번에 많은 데이터를 모아서 처리한다.</li>\n<li>\n<p>기준 시간 동안 발생한 여러 이벤트는 하나의 메시지로 모아서 통지하자.</p>\n<ul>\n<li>이게 우리와 맞는 것인가?</li>\n</ul>\n</li>\n<li><code>buffer()</code>를 이용한다.</li>\n</ul>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">process</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">consume</span><span class=\"mtk1\">().</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">recordToEventObject)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">groupBy</span><span class=\"mtk1\">(Message</span><span class=\"mtk15\">::</span><span class=\"mtk1\">key)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(flux </span><span class=\"mtk4\">-&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">flux</span><span class=\"mtk1\">.</span><span class=\"mtk11\">buffer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">Duration</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ofSeconds</span><span class=\"mtk1\">(</span><span class=\"mtk7\">30</span><span class=\"mtk1\">)))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">notify)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk15\">::</span><span class=\"mtk1\">saveResult)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             .</span><span class=\"mtk11\">subscribe</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3>정해진 양만큼만 처리하기</h3>\n<ul>\n<li>요청량이 과다해질 경우 장애가 발생할 수 있다.</li>\n</ul>\n<h4>메시지가 흘러가는 큰 그림</h4>\n<p><img src=\"../2021-01-24-19-59-06.png\"></p>\n<ul>\n<li>\n<p>Flow의 flow</p>\n<ol>\n<li>subscriber가 publisher에게 <code>subscribe()</code></li>\n<li>publisher가 subscriber에게 <code>onSubscribe()</code></li>\n<li>subscriber가 publisher에게 <code>request(n)</code></li>\n<li>publisher는 subscriber에게 n개의 데이터만 제공</li>\n</ol>\n</li>\n<li>Subscriber를 커스텀하면 된다.</li>\n</ul>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CustomSubscriber</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BaseSubscriber</span><span class=\"mtk1\">&lt;~&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk10\">Override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">protected</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">bookOnSubscribe</span><span class=\"mtk1\">(</span><span class=\"mtk10\">Subscription</span><span class=\"mtk1\"> </span><span class=\"mtk12\">subscription</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">request</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk10\">Overrice</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">protected</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">hookOnNext</span><span class=\"mtk1\">(</span><span class=\"mtk10\">ReceiverRecord</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">String</span><span class=\"mtk1\">, </span><span class=\"mtk10\">String</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">record</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Mono</span><span class=\"mtk1\">.</span><span class=\"mtk11\">just</span><span class=\"mtk1\">(record)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk11\">flatMap</span><span class=\"mtk1\">(</span><span class=\"mtk3\">/* Do something */</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk11\">subscribe</span><span class=\"mtk1\">(r </span><span class=\"mtk4\">-&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">offsetSink</span><span class=\"mtk1\">.</span><span class=\"mtk11\">next</span><span class=\"mtk1\">(record);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">request</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h3>시간을 달리는 메시지</h3>\n<h4>offset이 증가하는 경우에만 Commit을 하자.</h4>\n<pre class=\"grvsc-container default-dark\" data-language=\"java\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">CustomSubscriber</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk10\">BaseSubscriber</span><span class=\"mtk1\">&lt;~&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">private</span><span class=\"mtk1\"> </span><span class=\"mtk10\">FluxSink</span><span class=\"mtk1\">&lt;~&gt; offsetSink;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    @</span><span class=\"mtk10\">Override</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">protected</span><span class=\"mtk1\"> </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> </span><span class=\"mtk11\">hookOnNext</span><span class=\"mtk1\">(</span><span class=\"mtk10\">ReceiverREcord</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">String</span><span class=\"mtk1\">, </span><span class=\"mtk10\">String</span><span class=\"mtk1\">&gt; </span><span class=\"mtk12\">record</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Flux.&lt;~&gt;</span><span class=\"mtk11\">create</span><span class=\"mtk1\">(sink </span><span class=\"mtk4\">-&gt;</span><span class=\"mtk1\"> offsetSink = sink)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk11\">reduce</span><span class=\"mtk1\">(-</span><span class=\"mtk7\">1L</span><span class=\"mtk1\">, (last, r) </span><span class=\"mtk4\">-&gt;</span><span class=\"mtk1\"> last &lt; </span><span class=\"mtk12\">r</span><span class=\"mtk1\">.</span><span class=\"mtk11\">offset</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                    </span><span class=\"mtk15\">?</span><span class=\"mtk1\"> </span><span class=\"mtk11\">commit</span><span class=\"mtk1\">(r)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                                    </span><span class=\"mtk15\">:</span><span class=\"mtk1\"> last)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            .</span><span class=\"mtk11\">subscribe</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<h2>몇 가지 결론</h2>\n<ul>\n<li>구슬이 서 말이라도 꿰어야 보배라</li>\n<li>More Abstraction, Less Code!</li>\n<li>깊이 알고 제대로 쓰자</li>\n<li>모든 것을 공짜로 해결할 수 없다.</li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://github.com/EleganceLESS/nhn-forward-2019\">github 예제 코드</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","id":"7ac41b2b-5770-52c5-9aa8-effef64883ab","excerpt":"이 글은 이병찬 님의 강의를 요약한 내용입니다. 원본 강의는 링크에서 확인하실 수 있습니다. Kafka 아주 인기있는 스트리밍 플랫폼 Spring에서 Kafka를 사용하려면 Spring Kafka를 사용하면 된다. @KafkaListner 어노테이션을 붙이는 것만으로도 웹 MVC…"}},{"node":{"frontmatter":{"path":"kafka_quick_start","title":"Kafka 기본 개념 및 Quick Start","category":"Kafka","date":"Jan 19, 2021"},"html":"<h2>Kafka가 어디에 쓴느 물건인가</h2>\n<p>이름은 Apache Kafka<br>\nLinkedIn에서 <strong>분산 메시징 시스템</strong>으로써 오픈소스로 공개했다.<br>\n대용량의 실시간 로그처리에 특화되었다.   </p>\n<h3>용어 정리</h3>\n<h4>topic</h4>\n<p>producer가 생성하고 consumer가 소비하는 메세지</p>\n<h4>partition</h4>\n<ul>\n<li><code>topic</code> 안에서 여러 개의 partition으로 나누어져 있다.   </li>\n<li>메세지를 쓰고 읽을 때 분산 처리하여 빠르게 수행 가능하다.   </li>\n<li>consumer group 당 하나의 consumer<strong>만</strong> 접근이 허용된다.</li>\n<li></li>\n<li>log : <code>partition</code>의 한 칸을 뜻한다.</li>\n</ul>\n<h4>broker</h4>\n<ul>\n<li>topic 기준으로 메세지를 관리한다.</li>\n<li>producer에게 받은 메시지를 topic 별로 분류하여 쌓아 놓는다.</li>\n</ul>\n<h4>producer</h4>\n<ul>\n<li>메세지를 생성하고 topic에 메세지를 broker에게 전달한다.   </li>\n<li>producer는 consumer의 존재를 모른다.</li>\n</ul>\n<h4>consumer</h4>\n<ul>\n<li>topic을 구독하여 broker에게서 해당 토픽에 있는 메세지를 소비한다.</li>\n<li>해당 topic 내에 각 파티션에 존재하는 offset의 위치를 통해서 이전에 소비했던 offset의 위치를 기억하고 관리한다.</li>\n<li>producer가 consumer에게 메시지를 push하는 방식이 아닌, <strong>consumer가 producer로부터 pull하는 방식</strong></li>\n<li></li>\n</ul>\n<h4>consumer group</h4>\n<ul>\n<li>consumer들의 묶음</li>\n<li>반드시 해당 topic의 파티션은 그 consumer group과 1:n 매칭을 해야 한다.</li>\n<li>그룹을 생성할 때 동일한 이름의 그룹이 있는지 체크해 봐야 한다.</li>\n<li>\n<p>존재하는 이유?</p>\n<ol>\n<li>그룹 내 컨슈머 하나가 장애가 발생하더라도 멈추지 않고 작업을 이어갈 수 있다.</li>\n<li>group 별로 자신만의 offset을 관리하기 때문에, 동일한 토픽을 여러 consumer group이 consume하더라도 데이터의 손실 없이 가져갈 수 있다.</li>\n</ol>\n</li>\n<li>\n<p>topic의 partition >= consumer group의 consumer 이어야 한다.</p>\n<ul>\n<li>partition &#x3C; consumer 의 경우 : 놀고 있는 consumer가 발생하여 비효율적이다.</li>\n</ul>\n</li>\n</ul>\n<h4>replication</h4>\n<ul>\n<li>partition을 복제하여 클러스터에 분산시킬 수 있다.</li>\n<li>replication factor N으로 설정할 경우 N개의 replica가 생성된다.</li>\n<li>replica에는 1개의 leader와 N-1개의 follower로 구성된다.</li>\n<li>\n<p>partition에 대한 읽기와 쓰기는 모두 leader에서 이루어진다.</p>\n<ul>\n<li>follower들은 단순히 leader를 복제한다.</li>\n</ul>\n</li>\n<li>만약 leader에 장애가 발생할 경우 follwer 중 하나가 새로운 leader가 된다.</li>\n</ul>\n<h1>Kafka Quick Start</h1>\n<h4>STEP 1: kafka 설치</h4>\n<p><a href=\"https://www.apache.org/dyn/closer.cgi?path=/kafka/2.7.0/kafka_2.13-2.7.0.tgz\">Download</a>에서 다운로드한다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ tar -zxf kafka_2.13-2.7.0.tgz</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">$ cd kafka_2.13-2.7.0</span></span></code></pre>\n<h4>STEP 2: kafka 환경 시작하기</h4>\n<ol>\n<li>\n<p>terminal(1) zookeeper 서비스를 시작한다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ bin/zookeeper-server-start.sh config/zookeeper.properties</span></span></code></pre>\n</li>\n<li>\n<p>terminal(2) kafka broker 서비스를 시작한다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ bin/kafka-server-start.sh config/server.properties</span></span></code></pre>\n<p>모두 성공하였다면 기본 Kafka 환경이 실행되고 있고 사용할 준비가 된 것이다.</p>\n</li>\n</ol>\n<h4>STEP 3: 이벤트를 저장할 topic 생성하기</h4>\n<p>이벤트는 records, messages 라고도 불린다.<br>\nKafka는 event streaming platform이기 때문에 다양한 기종에서 이벤트를 읽기, 쓰기, 저장하기, 프로세싱이 가능하다.\n이벤트들은 토픽에 저장된다. 아주 간단하게 말하자면 토픽은 파일 시스템의 폴더와 유사하고, 이벤트는 폴터 안의 파일이다.<br>\n이벤트를 쓰기 전에, 토픽을 생성해야 한다.</p>\n<ol>\n<li>\n<p>terminal(3) 토픽 생성</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ bin/kafka-topics.sh --create --topic quickstart-events --bootstrap-server localhost:9092</span></span></code></pre>\n</li>\n<li>\n<p>Kafka의 커맨드 라인 툴은 모두 추가 옵션을 가지고 있다. 예를 들어 새로운 토픽의 디테일을 보여주는 밑 예제</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ bin/kafka-topics.sh --describe --topic quickstart-events --bootstrap-server localhost:9092</span></span></code></pre>\n</li>\n</ol>\n<h4>STEP 4: 토픽에 이벤트 쓰기</h4>\n<p>Kafka 클라이언트는 이벤트를 쓰거나 읽기 위해 네트워크를 통해서 borker와 소통한다.<br>\n이벤트를 한 번 받으면 borker는 내구성이 좋은 방식으로 이벤트를 저장한다.</p>\n<ol>\n<li>\n<p>console(3) producer 생성하기</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ bin/kafka-console-producer.sh --topic quickstart-events --bootstrap-server localhost:9092</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">&gt; Hello world</span></span></code></pre>\n</li>\n</ol>\n<h4>STEP 5: 이벤트 읽기</h4>\n<ol>\n<li>\n<p>console(4) consumer 생성하기</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ bin/kafka-console-consumer.sh --topic quickstart-events --from-beginnig --bootstrap-server localhost:9092</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Hello world</span></span></code></pre>\n<h4>SETP 6: kafka 커넥트로 데이터를 이벤트 스트림으로 import/export 하기</h4>\n</li>\n</ol>\n<h4>STEP 7: kafka streams로 이벤트 처리하기</h4>\n<p>데이터를 kafka의 이벤트로 저장을 하게 되면, Java/Scala로 kafka streams 클라이언트 라이브러리로 데이터를 처리할 수 있다. 라이브러리는 정확히 한 번, 상태 저장 작업 및 집계, 윈도우 설정, 조인, 이벤트 시간에 따른 처리 등을 지원한다.</p>\n<ul>\n<li><a href=\"https://kafka.apache.org/25/documentation/streams/\">Kafka streams: mission critical real-time application과 마이크로 서비스를 작성하기 가장 쉬운 방법</a></li>\n<li><a href=\"https://eun-seong.github.io/TIL/posts/Kafka/kafka_streams_write_app_tutorial\">Kafka 데모 앱 만들기</a></li>\n</ul>\n<h4>STEP 8: kafka 종료하기</h4>\n<ol>\n<li>producer, consumer 종료</li>\n<li>kafka broker 종료</li>\n<li>zookeeper 서버 종료</li>\n<li>\n<p>kafka 환경의 이벤트를 포함한 모든 데이터를 지우고 싶을 때</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"shell\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">$ rm -rf /tmp/kafka-logs /tmp/zookeeper</span></span></code></pre>\n</li>\n</ol>\n<hr>\n<ul>\n<li><a href=\"https://www.popit.kr/kafka-consumer-group/\">Kafka Consumer Group</a></li>\n<li><a href=\"https://kafka.apache.org/quickstart#quickstart_kafkastreams\">Kafka DOCS</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","id":"bc3a663b-894b-5260-b20b-2a8f27d12f82","excerpt":"Kafka가 어디에 쓴느 물건인가 이름은 Apache Kafka LinkedIn에서 분산 메시징 시스템으로써 오픈소스로 공개했다. 대용량의 실시간 로그처리에 특화되었다.    용어 정리 topic producer가 생성하고 consumer가 소비하는 메세지 partition topic 안에서 여러 개의 partition…"}},{"node":{"frontmatter":{"path":"kafka_streams_write_app_tutorial","title":"Kafka Streams 데모 앱 만들기","category":"Kafka","date":"Jan 19, 2021"},"html":"<h1>데모 앱 만들기</h1>\n<hr>\n<ul>\n<li><a href=\"https://kafka.apache.org/25/documentation/streams/quickstart\">Kafka streams demo app</a></li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","id":"38e410b4-83b8-553f-9d4d-7195e2f1fee0","excerpt":"데모 앱 만들기 Kafka streams demo app"}}]}},"staticQueryHashes":["3649515864"]}