{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/C++/c++_stl_basic","result":{"pageContext":{"html":"<h2>STL이란</h2>\n<p>Standard Template Library   </p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>desc</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>container</td>\n<td>객체를 저장하는 객체</td>\n</tr>\n<tr>\n<td>iterator</td>\n<td>컨테이너의 원소를 가리키는 포인터와 비슷한 것</td>\n</tr>\n<tr>\n<td>algorithm</td>\n<td>정렬, 삭제, 검색, 연산 등의 함수 템플릿</td>\n</tr>\n<tr>\n<td>function object</td>\n<td>함수처럼 동작하는 <code>operator()</code> 연산자 오버로딩한 객체</td>\n</tr>\n<tr>\n<td>adaptor</td>\n<td>기존의 인터페이스를 변경한 새로운 인터페이스를 갖는 구성 요소</td>\n</tr>\n<tr>\n<td>allocator</td>\n<td>컨테이너의 메모리 할당 정책을 캡슐화한 클래스 객체</td>\n</tr>\n</tbody>\n</table>\n<h3>Container</h3>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>order type</th>\n<th>data type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>vector</td>\n<td>시퀀스</td>\n<td>배열</td>\n</tr>\n<tr>\n<td>deque</td>\n<td>시퀀스</td>\n<td>배열</td>\n</tr>\n<tr>\n<td>list</td>\n<td>시퀀스</td>\n<td>노드</td>\n</tr>\n<tr>\n<td>set</td>\n<td>연관</td>\n<td>노드</td>\n</tr>\n<tr>\n<td>multiset</td>\n<td>연관</td>\n<td>노드</td>\n</tr>\n<tr>\n<td>map</td>\n<td>연관</td>\n<td>노드</td>\n</tr>\n<tr>\n<td>multimap</td>\n<td>연관</td>\n<td>노드</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>시퀀스 : 컨테이너가 자신만의 삽입 순서를 가지고 있음</li>\n<li>연관 : 삽입 순서와 관계 없이 특정 정렬 기준에 따라 자동 정렬됨</li>\n<li>배열 : 데이터 여러 개가 하나의 메모리 단위에 저장</li>\n<li>노드 : 데이터 하나를 하나의 메모리 단위에 저장</li>\n</ul>\n<h3>iterator</h3>\n<ul>\n<li>포인터와 비슷하게 동작</li>\n<li>컨테이너와 알고리즘을 묶어주는 인터페이스 역할</li>\n<li><code>begin()</code>은 컨테이너의 맨 처음 원소를 가리킴</li>\n<li><code>end()</code>는 컨테이너의 맨 마지막 원소 다음을 가리킴</li>\n<li><code>++</code>, <code>!=</code>, <code>==</code> 연산 가능</li>\n<li>\n<p>종류</p>\n<ul>\n<li>입력 반복자</li>\n<li>출력 반복자</li>\n<li>순방향 반복자</li>\n<li>\n<p>양방향 반복자 : <code>++</code>, <code>--</code> 가능한 반복자</p>\n<ul>\n<li>list, set, multiset, map, multimap</li>\n</ul>\n</li>\n<li>\n<p>임의 접근 반복자</p>\n<ul>\n<li>vector, deque</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>algorithm : <code>&#x3C;algorithm></code> 헤더에 정의</h3>\n<ul>\n<li>\n<p><code>find(iterator start, iterator end, T value)</code></p>\n<ul>\n<li>[<code>start</code>, <code>end</code>) 범위에서 <code>value</code> 값을 찾는다</li>\n<li>값이 없으면 <code>end</code> iterator 반환</li>\n<li>값이 있으면 그에 해당하는 iterator 반환</li>\n</ul>\n</li>\n<li>\n<p><code>max_element(iterator start, iterator end)</code>, <code>min_element(iterator start, iterator end)</code></p>\n<ul>\n<li>[<code>start</code>, <code>end</code>) 범위에서 최대/최소값을 찾는다</li>\n</ul>\n</li>\n<li>\n<p><code>sort(iterator start, iterator end)</code></p>\n<ul>\n<li>[<code>start</code>, <code>end</code>) 범위에서 정렬한다.</li>\n<li>기본적으로 오름차순 정렬</li>\n<li>\n<p>algorithm의 <code>greater&#x3C;T></code>를 사용하면 된다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"c++\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">sort</span><span class=\"mtk1\">(</span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">v</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(), greater&lt;</span><span class=\"mtk4\">int</span><span class=\"mtk1\">&gt;);</span></span></span></code></pre>\n</li>\n<li>\n<p>사용자 정의 객체에서도 사용 가능하다.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"c++\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;iostream&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;algorithm&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">#include</span><span class=\"mtk4\"> </span><span class=\"mtk8\">&lt;vector&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">using</span><span class=\"mtk1\"> </span><span class=\"mtk4\">namespace</span><span class=\"mtk1\"> </span><span class=\"mtk10\">std</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk10\">myClass</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">public:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">myClass</span><span class=\"mtk1\">(</span><span class=\"mtk4\">char*</span><span class=\"mtk1\"> </span><span class=\"mtk12\">name</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">age</span><span class=\"mtk1\">, </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk12\">height</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">name</span><span class=\"mtk1\"> = name;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">age</span><span class=\"mtk1\"> = age;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk4\">this</span><span class=\"mtk1\">-&gt;</span><span class=\"mtk12\">height</span><span class=\"mtk1\"> = height;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">private:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">char</span><span class=\"mtk1\">[</span><span class=\"mtk7\">20</span><span class=\"mtk1\">] name;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> age;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">int</span><span class=\"mtk1\"> height;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk11\">compare</span><span class=\"mtk1\">(</span><span class=\"mtk10\">myClass</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk10\">myClass</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\">(</span><span class=\"mtk12\">a</span><span class=\"mtk1\">.</span><span class=\"mtk12\">age</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">b</span><span class=\"mtk1\">.</span><span class=\"mtk12\">age</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">        // 키가 작은 사람 순서</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">.</span><span class=\"mtk12\">height</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">b</span><span class=\"mtk1\">.</span><span class=\"mtk12\">height</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">    // 나이가 많은 사람 순서</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\">.</span><span class=\"mtk12\">age</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">b</span><span class=\"mtk1\">.</span><span class=\"mtk12\">age</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">int</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    vector&lt;myClass&gt; people;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    myClass </span><span class=\"mtk11\">person1</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;eun&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\">, </span><span class=\"mtk7\">168</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    myClass </span><span class=\"mtk11\">person2</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;hong&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">18</span><span class=\"mtk1\">, </span><span class=\"mtk7\">178</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    myClass </span><span class=\"mtk11\">person3</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;kim&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">24</span><span class=\"mtk1\">, </span><span class=\"mtk7\">173</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">people</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(person1);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">people</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(person2);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">people</span><span class=\"mtk1\">.</span><span class=\"mtk11\">push</span><span class=\"mtk1\">(person3);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">sort</span><span class=\"mtk1\">(</span><span class=\"mtk12\">people</span><span class=\"mtk1\">.</span><span class=\"mtk11\">begin</span><span class=\"mtk1\">(), </span><span class=\"mtk12\">people</span><span class=\"mtk1\">.</span><span class=\"mtk11\">end</span><span class=\"mtk1\">(), compare);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">    // eun &gt; kim &gt; hong</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><code>lower_bound(iterator start, iterator end, value)</code></p>\n<ul>\n<li>[<code>start</code>, <code>end</code>) 범위에서 value 값보다 크거나 같은 값들 중 가장 먼저 있는 값의 이터레이터</li>\n</ul>\n</li>\n<li>\n<p><code>upper_bound(iterator start, iterator end, value)</code></p>\n<ul>\n<li>[<code>start</code>, <code>end</code>) 범위에서 value 값보다 작거나 같은 값들 중 가장 먼저 있는 값의 이터레이터</li>\n</ul>\n</li>\n</ul>\n<h3>Functio object</h3>\n<p><code>sort()</code> 함수 3번째 인자 함수 객체, 함수, 함수 포인터 등을 객체로 받아 알고리즘의 유연함을 더해준다.</p>\n<h3>adapter</h3>\n<h4>conatiner adapter</h4>\n<ul>\n<li>stack</li>\n<li>queue</li>\n<li>priority_queue</li>\n</ul>\n<h4>iterator adapter</h4>\n<ul>\n<li>reverse_iterator : iterator와 다르게 역방향으로 진행되는 반복자</li>\n<li>back<em>insert</em>iterator</li>\n<li>front<em>insert</em>iterator</li>\n<li>insert_iterator</li>\n</ul>\n<h4>function adapter</h4>\n<ul>\n<li>binder</li>\n<li>not2 : 함수 객체를 반대로 변환하는 어댑터</li>\n<li>...</li>\n</ul>\n<h3>allocator</h3>\n<p><code>new</code> <code>delete</code> 처럼 객체를 메모리에 할당할 수 있다. 사용자 정의도 가능 </p>\n<details style='color: #fff'>\n<summary>문제</summary>\n1. 컨테이너 이터레이터 알고리즘\n2. 시퀀스 연관\n3. 임의 접근 양방향 시퀀스\n4. ABCD AB CD\n5. 4 5 6\n6. `begin()`, `end()` `*`\n7. adaptor, container adaptor, iterator adaptor, function adaptor\n</details>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk7 { color: #B5CEA8; }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","title":"[C++] STL 기본","date":"Jan 29, 2021"}},"staticQueryHashes":["3649515864"]}